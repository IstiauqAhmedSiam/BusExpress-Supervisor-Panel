// app/scanned-ticket/[ticketId]/page.jsx
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';

const ScannedTicketDetailsPage = () => {
    const router = useRouter();
    const { ticketId } = useParams(); // Get ticketId from the URL

    const [ticketDetails, setTicketDetails] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchScannedTicketDetails = async () => {
            if (!ticketId) {
                setError('No ticket ID provided for verification.');
                setLoading(false);
                return;
            }

            setLoading(true);
            setError(null);
            try {
                let ticketData = await fetch(process.env.NEXT_PUBLIC_API_URL + "/supervisor/ticketData.php?type=get", {
                    method: 'POST',
                    headers: {
                        'Content-Type' : 'application/x-www-form-urlencoded',
                        'Authorization': localStorage.getItem("authToken"),
                    }, 
                    body: `ticketID=${ticketId}`
                });
                ticketData = await ticketData.json();


                const dummyScannedData = {
                    "TICKET-ABCXYZ": { // This should match the mock ID generated by the QR scanner
                        ticketNumber: "S-ABC-XYZ-123",
                        status: "Verified", // Or "Not Verified", "Invalid" etc.
                        passengerName: "John Doe",
                        seatNumber: "A1",
                        bookingId: "BOOKING-XYZ-789",
                        tripRoute: "Dhaka to Cox Bazar",
                        departureTime: "10:00 AM, 25 Jun 2025",
                        message: "Ticket is valid for this trip. Passenger verified.",
                    },
                    "INVALID-QR-123": {
                        ticketNumber: "INV-123",
                        status: "Invalid",
                        message: "QR code is invalid or not recognized.",
                    },
                    "NOT-VERIFIED-456": {
                        ticketNumber: "NV-456",
                        status: "Not Verified",
                        passengerName: "Jane Smith",
                        seatNumber: "B2",
                        bookingId: "BOOKING-JKL-456",
                        tripRoute: "Dhaka to Cox Bazar",
                        departureTime: "10:00 AM, 25 Jun 2025",
                        message: "Ticket is valid, but not yet verified.",
                    },
                    "ALREADY-VERIFIED-789": {
                        ticketNumber: "AV-789",
                        status: "Verified", // Already verified
                        passengerName: "Alice Johnson",
                        seatNumber: "C3",
                        bookingId: "BOOKING-MNO-789",
                        tripRoute: "Dhaka to Cox Bazar",
                        departureTime: "10:00 AM, 25 Jun 2025",
                        message: "This ticket has already been verified.",
                    }
                };

                const data = ticketData; // Look up based on scanned ID

                if (data) {
                    setTicketDetails(data);
                } else {
                    setError('Ticket not found in system or invalid QR data.');
                }
            } catch (err) {
                setError('Failed to fetch ticket details for verification.');
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        fetchScannedTicketDetails();
    }, [ticketId]);

    const handleVerifyTicket = async () => {
        let ticketData = await fetch(process.env.NEXT_PUBLIC_API_URL + "/supervisor/ticketData.php?type=mark-verified", {
            method: 'POST',
            headers: {
                'Content-Type' : 'application/x-www-form-urlencoded',
                'Authorization': localStorage.getItem("authToken"),
            }, 
            body: `ticketID=${ticketId}`
        });
        ticketData = await ticketData.json();

        router.push("/ongoing-trip/trip1010/ticket-verification");
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100 font-sans">
                <p className="text-gray-700 text-lg">Fetching ticket details...</p>
            </div>
        );
    }

    if (error || !ticketDetails) {
        return (
            <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4 font-sans text-center">
                <p className="text-red-600 text-xl mb-4">{error || 'Could not load ticket details.'}</p>
                <button
                    onClick={() => router.replace('/scan-qr')} // Go back to scanner
                    className="bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
                >
                    Scan Another Ticket
                </button>
                <button
                    onClick={() => router.push('/')} // Or go to home
                    className="mt-2 text-blue-600 text-sm font-semibold hover:underline"
                >
                    Back to Home
                </button>
            </div>
        );
    }

    // Determine status color and message
    let statusColor = 'text-gray-800';
    let statusBg = 'bg-gray-100';
    if (ticketDetails.status === 'Verified') {
        statusColor = 'text-green-700';
        statusBg = 'bg-green-100';
    } else if (ticketDetails.status === 'Not Verified') {
        statusColor = 'text-yellow-700';
        statusBg = 'bg-yellow-100';
    } else if (ticketDetails.status === 'Invalid') {
        statusColor = 'text-red-700';
        statusBg = 'bg-red-100';
    }

    return (
        <div className="bg-gray-100 min-h-screen flex flex-col font-sans">
            {/* Header */}
            <header className="bg-blue-700 p-4 shadow-md text-white flex items-center">
                <button onClick={() => router.back()} className="mr-4 p-1 rounded-full hover:bg-white hover:bg-opacity-20 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                </button>
                <h1 className="text-xl font-semibold flex-grow">Ticket Scan Result</h1>
            </header>

            <main className="p-4 flex-grow">
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                    <h2 className="text-2xl font-bold text-gray-800 mb-4">Ticket: {ticketDetails.ticketNumber}</h2>

                    <div className={`p-3 rounded-md mb-4 text-center ${statusBg}`}>
                        <p className={`text-xl font-bold ${statusColor}`}>{ticketDetails.status}</p>
                        {ticketDetails.message && <p className="text-sm text-gray-700 mt-1">{ticketDetails.message}</p>}
                    </div>

                    {ticketDetails.status !== 'Invalid' && ( // Only show details if ticket is potentially valid
                        <div className="space-y-3 text-gray-700">
                            <div className="flex justify-between items-center">
                                <span className="font-semibold">Trip Route:</span>
                                <span>{ticketDetails.tripRoute}</span>
                            </div>
                            <div className="flex justify-between items-center">
                                <span className="font-semibold">Departure:</span>
                                <span>{ticketDetails.departureTime}</span>
                            </div>
                            <div className="flex justify-between items-center">
                                <span className="font-semibold">Seat Number:</span>
                                <span>{ticketDetails.seatNumber}</span>
                            </div>
                            {/* Add more relevant details here */}
                        </div>
                    )}
                </div>

                {/* Action button based on status */}
                {ticketDetails.status === 'Not Verified' && (
                    <button
                        onClick={handleVerifyTicket}
                        className="w-full bg-green-600 text-white font-semibold py-3 px-4 rounded-md hover:bg-green-700 transition-colors"
                    >
                        Mark as Verified
                    </button>
                )}
                {ticketDetails.status === 'Verified' && (
                    <button
                        onClick={() => router.back()}
                        className="w-full bg-blue-600 text-white font-semibold py-3 px-4 rounded-md hover:bg-blue-700 transition-colors"
                    >
                        Scan Another Ticket
                    </button>
                )}
                 {ticketDetails.status === 'Invalid' && (
                    <button
                        onClick={() => router.replace('/scan-qr')}
                        className="w-full bg-blue-600 text-white font-semibold py-3 px-4 rounded-md hover:bg-blue-700 transition-colors"
                    >
                        Scan Again
                    </button>
                )}
            </main>
        </div>
    );
};

export default ScannedTicketDetailsPage;